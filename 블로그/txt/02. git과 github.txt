

	[			형상관리				]
	계획 -> 분석 -> 설계 -> 구현 -> 시험 -> 유지보수

1. 계획 
  1) 타당성 분석
	경제적, 기술적, 법적
	
  2) 프로젝트 계획서 작성(O)
	프로젝트 범위, 자원 점검(HW 사양, OS 버전, SW), 인원, 예산, 일정

  3) 팀구성(O)
	민주적(=분산형), 중앙집중형, 혼합형, 계층형	

  4) 개발 비용 산정
	
  5) 프로젝트 스케줄링(O)
	소작업 분해 -> WBS -> CPM -> 최소 비용 산정 -> CPM 수정 -> 간트 차트
			(마인드맵)

2. 분석
  1) 요구사항 분석(O)
	
3. 설계
  1) 아키텍처
	인프라(O) : 시스템 아키텍처
	프론트 엔드(O) : UI/UX 설계도, SW 아키텍처
	백 엔드(O) : API 명세서, ERD, SW 아키텍처

4. 구현

5. 시험
	TDD(O)

6. 유지보수
	개발이 끝난 후 서비스를 운영하면서 기능을 추가하거나 에러를 잡는 일




02. git & github
  1) git
	git은 내컴퓨터에 설치되는 프로그램
	형상관리를 해주는 프로그램
    (0) 깃 설치
	https://git-scm.com/downloads

    (1) 깃이란?
	Git이란 소스코드를 효과적으로 관리하기 위해 개발된 '분산형 버전 관리 시스템' 
	Git에서는 소스 코드가 변경된 이력을 쉽게 확인할 수 있고
	특정 시점에 저장된 버전과 비교하거나 특정 시점으로 되돌아갈 수도 있다.

	또 내가 올리려는 파일이 누군가 편집한 내용과 충돌한다면
	서버에 업로드 할 때 경고 메시지가 발생함.

    (2) 저장소
	저장소(Git repository)란 말그대로 파일이나 폴더를 저장해 두는 곳
	그런데 Git 저장소에서는 파일이 변경 이력 별로 구분되어 저장됨
	비슷한 파일이라도 실제 내용 일부 문구가 서로 다르면 다른 파일로 인식하기 때문에 
	파일을 변경 사항 별로 구분해 저장 가능

	평소에는 내 PC의 로컬 저장소에서 작업하다가 작업한 내용을 공개하고 싶을 때에 원격 저장소에 업로드
	물론 원격 저장소에서 다른 사람이 작업한 파일을 로컬 저장소로 가져오는 것도 가능

      [1] 저장소의 종류
	로컬 저장소 : 내 PC에 파일이 저장되는 개인 전용 저장소, git 관련 파일이 생성되어 있는 특정 폴더
	원격 저장소 : 파일이 원격 저장소 전용 서버에서 관리되며 여러 사람이 함께 공유하기 위한 저장소
			대표적으로 github, Backlog와 같은 저장소가 있다.


      [2] 로컬 저장소 생성
	폴더 생성 -> 폴더로 이동 -> 우클릭 -> git으로 열기 -> git init

	.git 폴더 확인

	로컬 저장소를 삭제하고 싶으면 .git 폴더를 삭제

    (3) 버전 관리
      [0] 계정 설정
	git config --list
	git config --global user.email "you@example.com"
	git config --global user.name "Your Name"

      [1] 현재 상태 확인
	git status
		Untracked	: 스테이징 영역에 추가되지 않은 상태
		Tracked		: 스테이징 영역에 추가된 상태
			Modified	: 스테이징 영역에 있는 파일의 내용이 수정된 상태
			Unmodified	: 수정된 내용을 다시 스테이징 영역에 추가한 상태
      [2] 변경 사항 확인
	git diff

      [3] 버전 관리할 파일 추가(파일은 스테이징 영역으로 추가)
		git으로 공유하면 안되는 파일들은 .gitignore 파일에 목록을 작성하여 관리

	git add 파일이름
	git add .       모든 파일 추가할 땐 . 사용

		* add 를 취소하고 싶을 땐 git rm --cached 파일이름

      [4] 버전 저장
	그냥 커밋할 때
	git commit -m "메시지"

	템플릿으로 커밋할 때
	git config --global commit.template .gitmessage.txt
	git commit
	


      [5] 커밋 내역 확인
	git log
	git log -p
	git log --all
	git log --oneline


    (4) 수정하기
      [1] 스테이징 되돌리기
	git rm --cached [파일이름]

      [2] 커밋 내용 수정하기
	가장 최근의 커밋 내역을 덮어쓰기
	git commit --amend -m "메시지"

      [3] 이전 버전으로 되돌리기
        1] 이전 버전 파일 확인만 할 때
	git checkout 커밋해시

	* 주의 : 작업을 저장하지 않은 상태에서 다른 버전으로 왔다갔다 하지 않아야 한다.
		저장하지 않고 왔다갔다 하면 HEAD가 특정 브랜치가 아닌 커밋을 가리키는 상태가 됨
			정상 : HEAD -> 브랜치 -> commit
			비정상 : HEAD -> commit
			해결 : git branch -f main HEAD


        2] 이전 버전(현재 상태 유지)
	git reset --soft [커밋 해시]

        3] 이전 버전(작업 디렉토리 유지)
	git reset --mixed [커밋 해시]

        4] 이전 버전(완전 이전 버전으로)
	git reset --hard [커밋 해시]


		--hard	: 작업 디렉토리 변경, 스테이징 영역 변경, 저장소 변경
		--mixed	: 작업 디렉토리 유지, 스테이징 영역 변경, 저장소 변경, 옵션을 따로 안쓰면 기본으로 실행되는 옵션
		--soft	: 작업 디렉토리 유지, 스테이징 영역 유지, 저장소 변경

   
      [4] 커밋 참조 내역 확인하기
	git reflog



    (5) 커밋 메시지 작성 규칙
	무조건 지켜야하는 것은 아니지만 지키면 협업하기에 좋은 문화



  2) github
    (1) github란?
	git으로 관리하는 프로젝트를 업로드하거나 공유할 수 있는 웹 사이트
	
    (2) git으로 관리하는 프로젝트 github에 저장하기
      [1] 원격 저장소 확인
	git remote -v
	git remote show 원격 저장소 이름

      [2] 원격 저장소 설정
	git remote add 원격저장소이름 원격저장소주소
		ex) git remote add origin https://github.com/본인계정/tutorial

      [3] 원격 저장소에 공유
	내가 현재 위치한 브랜치를 원격에 있는 브랜치에 올린다.
	git push origin [원격 브랜치]

      [4] 원격 저장소의 내용을 내 저장소로 가져오기
	내가 현재 위치한 브랜치로 원격에 있는 브랜치를 가져온다
	git pull origin [원격 브랜치]	가져오고 merge까지 자동으로 수행
	git fetch origin [원격 브랜치]	가져오고 merge 안함, 직접 확인 후 merge를 수동으로 진행 후 작업


      [5] 로컬에 저장소가 없을 때 원격 저장소 가져오기
	git clone [원격저장소 주소]



  3) README.md 작성
	0. 개행  
	내용 끝에 띄어쓰기 2번
	
	1. 제목  
	    \# 제목  
	    \## 제목  
	    \### 제목  
	
	    또는
	
	    제목  
	    \==========  
	    제목  
	    \----------
	
	2. 목록 표시  
	    1. 첫번째
	    2. 두번째
	    3. 세번째
	
	    * 첫번째
	    * 두번째
	    * 세번째
	
	3. 블록 표시  
	    \> 전체 블록  
	    \>   >   제목  
	    \>   >   >   내용  
	
	4. 코드나 명령어
	    \```sh
	    \```
	
	    \```code
	    \```
	
	5. 가운데 정렬  
	    \<center>정렬 할 내용\</center>
	
	6. 그림 추가  
	    \<img src="그림 파일의 경로">
	
	7. 링크 추가   
	    [화면에 표시할 내용](링크 주소)


  4) 브랜치
	원본을 수정하지 않고 안전하게 새로운 기능을 추가해볼 수 있도록 하는 프로젝트의 복사본
      [1] 브랜치 생성
	git branch 브랜치이름

      [2] 브랜치 변환
	git checkout 브랜치이름

      [3] 브랜치 병합
	git checkout 브랜치이름	메인이 되는 브랜치
	git merge 다른브랜치이름

      [4] 브랜치 충돌
	충돌난 파일 내용 수정
	git add 파일이름
	git commit

      [5] 실습
	마스터로 git commit 몇 번 하고

	git branch [브랜치 이름]로 브랜치 생성

	git checkout [브랜치 이름]로 브랜치 변경

	변경한 브래치로 git commit 몇 번 하고

	git checkout master 로 브랜치 변경

	변경한 브래치에서 변경했던 파일을 master로도 변경 (내용은 다르게)

	git merge [브랜치 이름]  하면 충돌 발생

	충돌난 파일 내용 수정
	git add 파일이름
	git commit

 
    (5) 병합 방법
      [1] 3-way merge  
		이전 버전에서 기존 브랜치의 새로운 버전과 새로운 브랜치의 새로운 버전이 같이 있을 때

	c1 -> c2 			c3
		c2-1 -> c2-2


      [2] fast-forward merge
		이전 버전과 새로운 브랜치의 새로운 버전만 존재하는 상태
	병합 전
	c1 -> c2 ->
		   c3 -> c4

	병합 후
	c1 -> c2 -> c3 -> c4
	
      [3] rebase and merge 
		이전 버전에서 기존 브랜치의 새로운 버전과 새로운 브랜치의 새로운 버전이 같이 있을 때
  	병합 전
	c1 -> c2 -> c3
		c2-1 -> c2-2

	병합 후
	c1 -> c2 -> c3 -> c2-1 -> c2-2









  5) 원격 저장소 공유하기
	팀장이 github에 레포 생성 -> Settings -> Collaborators -> Add people 
	-> 초대할 사람의 email 입력 -> 클릭 -> 초대

	
	초대받은 사람이 -> 메일 확인 -> View invitation -> Accept invitaion













  6) 개발 도구와 연동
    [1] 개발도구에 git 계정 설정
	햄버거 버튼 -> File -> Settings -> Version Control -> Github -> +버튼 클릭 -> Login Via Github -> 로그인 진행 -> OK

    [2] 원격 저장소에서 파일 받아오기
	

    [3] 개발 도구에서 push 해보기
	파일 생성 또는 편집 -> Git에서 commit -> Git에서 push





참고하면 좋은 곳
	https://github.com/prgrms-be-devcourse/springboot-basic
	https://github.com/f-lab-edu/food-delivery/wiki



pull
push
하기 전에 +버튼(VS코드)
branch

github flow

충돌이 났을 때 새로운 가지부터 만들고 시작하자 일단
나만의 버전을 무조건 먼저 만들고 시작 하자
그러고 다 합치자=gitflow

내가 작업할거면
브랜치 따고 경로 만들고 작업해라
feature/user/login


cheackout 해서 최신버전으로 가기
feach