00. 관리자 로그인
	sudo su - root

01. IP 설정
	vi /etc/netplan/00-installer-config.yaml
network:
  renderer: networkd
  ethernets:
    ens33:
      addresses:
        - 10.10.10.30/24
      nameservers:
        addresses: [8.8.8.8]
      routes:
        - to: default
          via: 10.10.10.2
  version: 2

02. IP 설정 적용
	netplan apply

03. 레포지토리 목록 갱신
	apt update

04. HAProxy 설치
	apt install haproxy

05. HAProxy 실행
	systemctl restart haproxy

06. HAProxy 설정
	vi /etc/haproxy/haproxy.cfg 맨 마지막 줄에 다음 내용 추가

listen stats
    bind *:9000
    mode  http
    option dontlog-normal
    stats enable
    stats realm Haproxy\ Statistics
    stats uri /stats


07. HAProxy 설정 적용
	systemctl restart haproxy


08. HAProxy 실행 확인
	systemctl status haproxy
	apt install -y net-tools
	netstat -anlp | grep :9000	

	윈도우에서 웹 브라우저로 HAProxy 서버의 IP에 9000 포트의 /stats로 접속
	http://10.10.10.100:9000/stats


09. HAProxy에 웹 서버 부하분산 설정 추가
	vi /etc/haproxy/haproxy.cfg 맨 마지막 줄에 다음 내용 추가
frontend webserver
  bind *:80
  mode http
  default_backend nginx-server
  
backend nginx-server
  mode http
  balance roundrobin 
  option httpchk GET /
  server nginx1 10.10.10.10:80 check
  server nginx2 10.10.10.20:80 check

10. HAProxy 설정 적용
	systemctl restart haproxy


11. HAProxy 실행 확인
	systemctl status haproxy
	netstat -anlp | grep :9000	

	윈도우에서 웹 브라우저로 HAProxy 서버의 IP에 9000 포트의 /stats로 접속
	http://10.10.10.100:9000/stats


------------------------------------------------------------------------------------------------------------------

00. 관리자 로그인
01. IP 설정
02. IP 설정 적용
03. 레포지토리 목록 갱신
04. nginx 설치
	apt install -y nginx 

05. nginx 실행
	systemctl restart nginx

08. nginx 실행 확인
	systemctl status nginx
	apt install -y net-tools
	netstat -anlp | grep :80	

	윈도우에서 웹 브라우저로 nginx 서버의 IP에 80 포트의 /로 접속
	http://10.10.10.100:80/

09. 파일 생성
	vi /var/www/html/sjb.html 새로운 파일에 다음 내용 작성
server1 또는 server2



------------------------------------------------------------------------------------------------------------------

01. 최종 확인
	윈도우에서 웹 브라우저로 HAProxy 서버의 IP에 80 포트의 /sjb.html로 접속
	http://10.10.10.100:80/sjb.html


------------------------------------------------------------------------------------------------------------------
00. 관리자 로그인
01. IP 설정
02. IP 설정 적용
03. 레포지토리 목록 갱신
04. mariadb 설치
	apt install -y mariadb-server

05. mariadb 설정
	vi /etc/mysql/mariadb.conf.d/50-server.cnf
	27번 라인에 있는 설정을 다음처럼 변경
	bind-address            = 0.0.0.0

06. mariadb 실행
	systemctl restart mariadb

07. mariadb 실행 확인
	systemctl status mariadb
	apt install -y net-tools
	netstat -anlp | grep :3306	

------------------------------------------------------------------------------------------------------------------
DB 서버

01. mariadb 클라이언트 프로그램 실행
	mariadb
02. DB 생성
	CREATE DATABASE 3tier;

03. 사용자 생성 및 권한 설정
	CREATE USER 'kks'@'%' IDENTIFIED BY 'qwer1234';	이걸로 계정 생성
	SELECT user, host FROM mysql.user;			이걸로 생성된거 확인
	GRANT ALL PRIVILEGES ON 3tier.* TO 'kks'@'%';		이걸로 계정에 권한 부여
	FLUSH PRIVILEGES;						권한 적용

------------------------------------------------------------------------------------------------------------------
was 서버

00. 관리자 로그인
01. IP 설정
02. IP 설정 적용
03. 레포지토리 목록 갱신
04. 자바 설치
	apt install -y openjdk-17-jdk

05. 자바 설치 확인
	java --version

06. 백엔드 서버 파일 다운
	wget http://192.0.0.100:10000/was%2d0.0.1%2dSNAPSHOT.jar
wget http://183.109.119.198:10000/was%2d0.0.1%2dSNAPSHOT.jar
여기까지 완료
07. 환경변수 설정
	export DB_URL=jdbc:mariadb://10.10.10.30:3306/3tier
	export DB_USERNAME=kks
	export DB_PASSWORD=qwer1234

08. 백엔드 서버 실행
	java -jar was-0.0.1-SNAPSHOT.jar

------------------------------------------------------------------------------------------------------------------
다시 DB 서버로

04. 데이터 추가
	mariadb
	USE 3tier;
	INSERT INTO 3tier.student VALUES (1, 's01', 10), (2, 's02', 20);
마리아 디비 깔고
유저를 넣고 환경변수
	

------------------------------------------------------------------------------------------------------------------
	오늘 최종 확인
	윈도우에서 웹 브라우저로 was 서버의 IP에 8080 포트의 /student/list로 접속
	http://10.10.10.40:8080/student/list

web 서버

01. nginx 설정 추가
	vi /etc/nginx/sites-enabled/default
		server { 위 쪽에 다음 내용 추가

	upstream backend_servers {
        	server 10.10.10.40:8080;
	        server 10.10.10.60:8080;
	}


		location / {   ~~~~~ }  아래 쪽에 다음 내용 추가
        location /api/ {
                rewrite ^/api(/.*)$ $1 break; # /api 제거
                proxy_pass http://backend_servers; # 백엔드 서버 주소와 포트
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;
                proxy_cache_bypass $http_upgrade;
        }


	systemctl status nginx
	apt install -y net-tools
	netstat -anlp | grep :80	

	윈도우에서 웹 브라우저로 nginx 서버의 IP에 80 포트의 /로 접속
	http://10.10.10.100:80/


02. nginx 설정 적용
	systemctl restart nginx

03. nginx 실행 확인
	systemctl status nginx
	apt install -y net-tools
	netstat -anlp | grep :80	


04. 파일 생성
	vi /var/www/html/list.html 새로운 파일에 다음 내용 작성
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Fetch Student List</title>
</head>
<body>
  <button id="fetchButton">학생 리스트 가져오기</button>
  <ul id="studentList"></ul>

  <script>
    document.getElementById('fetchButton').addEventListener('click', async () => {
      try {
        const response = await fetch('/api/student/list', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json(); // 서버로부터 받은 데이터
        displayStudentList(data); // 데이터를 화면에 표시
      } catch (error) {
        console.error('Error fetching student list:', error);
      }
    });

    function displayStudentList(studentList) {
      const listElement = document.getElementById('studentList');
      listElement.innerHTML = '';

      studentList.forEach(student => {
        const listItem = document.createElement('li');
        listItem.textContent = `학생 번호: ${student.idx}, 학생 이름: ${student.name}, 학생 나이: ${student.age}`;
        listElement.appendChild(listItem);
      });
    }
  </script>
</body>
</html>




